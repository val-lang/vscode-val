{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Val",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#literals"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.documentation.val",
					"begin": "//",
					"end": "$",
					"patterns": [
						{
							"include": "#commentContents"
						}
					]
				},
				{
					"name": "comment.block.documentation.val",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"include": "#commentContents"
						}
					]
				}
			],
			"repository": {
				"commentContents": {
					"patterns": [
						{
							"name": "keyword.todo.val",
							"match": "\\b(TODO|FIXME|XXX|NOTE)\\b:?"
						}
					]
				}
			}
		},
		"declarations": {
			"patterns": [
				{
					"include": "#function"
				},
				{
					"include": "#type"
				},
				{
					"include": "#trait"
				}
			],
			"repository": {
				"function": {
					"name": "meta.definition.function.val",
					"begin": "\\b(fun)\\s+(\\w+)?(?=\\(|<)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.function.val"
						},
						"2": {
							"name": "entity.name.function.val"
						}
					},
					"end": "(?<=\\})|$",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#generic-parameter-clause"
						},
						{
							"include": "#keywords"
						}
					]
				},
				"type": {
					"name": "meta.definition.type.val",
					"begin": "\\b(type )",
					"beginCaptures": {
						"1": {
							"name": "storage.type.type.val"
						},
						"2": {
							"name": "entity.name.type.val"
						}
					},
					"end": "(?<=\\})|$",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#generic-parameter-clause"
						},
						{
							"include": "#keywords"
						}
					]
				},
				"trait": {
					"name": "meta.definition.trait.val",
					"begin": "\\b(trait )",
					"beginCaptures": {
						"1": {
							"name": "storage.type.trait.val"
						},
						"2": {
							"name": "entity.name.trait.val"
						}
					},
					"end": "(?<=\\})|$",
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#generic-parameter-clause"
						},
						{
							"include": "#keywords"
						}
					]
				},
				"generic-parameter-clause": {
					"begin": "<",
					"beginCaptures": {
						"0": {
							"name": "punctuation.separator.generic-parameter-clause.begin.val"
						}
					},
					"end": ">",
					"endCaptures": {
						"0": {
							"name": "punctuation.separator.generic-parameter-clause.end.val"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"name": "punctuation.separator.generic-parameters.val",
							"match": ","
						},
						{
							"match": "\\b((?!\\d)\\w[\\w\\d]*)\\b",
							"captures": {
								"1": {
									"name": "variable.language.generic-parameter.val"
								}
							}
						},
						{
							"name": "meta.generic-parameter-constraint.val",
							"begin": "(:)\\s*",
							"beginCaptures": {
								"1": {
									"name": "punctuation.separator.generic-parameter-constraint.val"
								}
							},
							"end": "(?=[,>]|(?!\\G)\\bwhere\\b)",
							"patterns": [
								{
									"name": "entity.other.conforming-trait.val",
									"begin": "\\G",
									"end": "(?=[,>]|(?!\\G)\\bwhere\\b)"
								}
							]
						}
					]
				}
			}
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.fun.val",
					"match": "\\b(fun)\\b"
				},
				{
					"name": "keyword.control.import.val",
					"match": "\\b(import)\\b"
				},
				{
					"name": "keyword.control.transfer.val",
					"match": "\\b(break|continue|return|throw|yield|yielded)\\b"
				},
				{
					"name": "keyword.control.loop.val",
					"match": "\\b(while|for|do|in)\\b"
				},
				{
					"name": "keyword.control.conditional.val",
					"match": "\\b(if|else|match|where)\\b"
				},
				{
					"name": "keyword.control.scope.val",
					"match": "\\b(catch|defer|try)\\b"
				},
				{
					"name": "keyword.type.val",
					"match": "\\b(conformance|extension|namespace|typealias)\\b"
				},
				{
					"name": "keyword.operator.val",
					"match": "\\b(operator|postfix|prefix|infix)\\b"
				},
				{
					"name": "keyword.modifier.val",
					"match": "\\b(public|static)\\b"
				},
				{
					"name": "keyword.convention.val",
					"match": "\\b(inout|let|set|sink)\\b"
				},
				{
					"name": "keyword.subscript.val",
					"match": "\\b(property|subscript)\\b"
				},
				{
					"name": "keyword.var.val",
					"match": "\\b(var)\\b"
				},
				{
					"name": "keyword.misc.val",
					"match": "\\b(deinit|some|spawn|is|as)\\b"
				},
				{
					"name": "variable.language.val",
					"match": "\\b(?:self|Self)\\b"
				}
			]
		},
		"literals": {
			"patterns": [
				{
					"include": "#boolean"
				},
				{
					"include": "#numeric"
				},
				{
					"include": "#nil"
				},
				{
					"include": "#any"
				},
				{
					"include": "#string"
				}
			],
			"repository": {
				"boolean": {
					"name": "constant.language.boolean.val",
					"match": "\\b(true|false)\\b"
				},
				"nil": {
					"name": "constant.language.nil.val",
					"match": "\\b(nil)\\b"
				},
				"any": {
					"name": "constant.language.any.val",
					"match": "\\b(any)\\b"
				},
				"numeric": {
					"patterns": [
						{
							"name": "constant.numeric.decimal.val",
							"match": "\\b[0-9][0-9_]*\\b"
						},
						{
							"name": "constant.numeric.hexadecimal.val",
							"match": "\\b0x[a-fA-F0-9_]+\\b"
						},
						{
							"name": "constant.numeric.octal.val",
							"match": "\\b0o[0-7_]+\\b"
						},
						{
							"name": "constant.numeric.binary.val",
							"match": "\\b0b[01_]+\\b"
						}
					]
				},
				"string": {
					"name": "string.quoted.double.val",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.val",
							"match": "\\\\."
						}
					]
				}
			}
		}
	},
	"scopeName": "source.val"
}
